package com.example.yang.androiddemo.activity;import android.app.Activity;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.Drawable;import android.media.ExifInterface;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.provider.MediaStore;import android.text.TextUtils;import android.util.DisplayMetrics;import android.view.View;import android.widget.TextView;import com.example.yang.androiddemo.R;import com.example.yang.androiddemo.utils.BitmapCacheUtil;import com.example.yang.androiddemo.utils.Event;import com.example.yang.androiddemo.utils.TouchCropImageView;import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;public class PictureCropActivity extends Activity implements View.OnClickListener {	private final static int RESULT_SELECT_HEADER =  1;	private final static int RESULT_CAPTURE_HEADER =  2;	public final static String KEY_IS_HEIGHT_FIX = "is_height_fix";	private TouchCropImageView mCropImage;	private TextView mBtnCancelSelect;	private TextView mBtnConfirmSelect;	private BitmapCacheUtil mBitmapCache;	private String mOriginalFileName = "temp.jpg";	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		setContentView(R.layout.picture_crop_activity);		initView();	}		public void initView() {		Intent intent = null;		boolean isCapture = false;		boolean isHeigthFix = false;//yang add on 2016-7-5，是否固定裁剪的高度		Intent extraIntent = getIntent();		if(extraIntent != null){			isCapture = extraIntent.getBooleanExtra("isCapture",false);			isHeigthFix = extraIntent.getBooleanExtra(KEY_IS_HEIGHT_FIX,false);			String fileName = extraIntent.getStringExtra("cropedName");			if(!TextUtils.isEmpty(fileName)){				mOriginalFileName = fileName;			}		}				File file = new File(Event.IMG_TEMP_PATH);			    if(!file.exists()){	    	file.mkdirs();	    }	    		if(isCapture){			Intent captureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);			captureIntent.putExtra(MediaStore.EXTRA_OUTPUT,					Uri.fromFile(new File(Event.IMG_TEMP_PATH,mOriginalFileName)));			startActivityForResult(captureIntent, RESULT_CAPTURE_HEADER);		}else{			intent = new Intent(					Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);			intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,"image/*");			startActivityForResult(intent,RESULT_SELECT_HEADER);		}		mCropImage=(TouchCropImageView)findViewById(R.id.cropImg);		mCropImage.setIsFixBound(isHeigthFix);//new add 2016-7-5		mBtnCancelSelect = (TextView)findViewById(R.id.cancel_select);		mBtnCancelSelect.setOnClickListener(this);				mBtnConfirmSelect = (TextView)findViewById(R.id.complete_select);		mBtnConfirmSelect.setOnClickListener(this);				mBitmapCache = new BitmapCacheUtil(this);		mBitmapCache.setCacheDir(Event.IMG_TEMP_PATH);	}	@Override	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		super.onActivityResult(requestCode, resultCode, data);		if(resultCode != Activity.RESULT_OK) {			finish();//user canceled			return;		}		DisplayMetrics metric = new DisplayMetrics();        getWindowManager().getDefaultDisplay().getMetrics(metric);        int width = metric.widthPixels;  // 屏幕宽度（像素）		if (requestCode == RESULT_SELECT_HEADER && resultCode == RESULT_OK && null != data) {            Uri selectedImage = data.getData();            if(selectedImage != null){            	String img_path = "";    			if(selectedImage.getScheme().toString().compareTo("content")==0){    				String[] proj = { MediaStore.Images.Media.DATA };    				Cursor actualimagecursor = managedQuery(selectedImage, proj, null,    						null, null);    				if (!actualimagecursor.isClosed()) {    					int actual_image_column_index = actualimagecursor    							.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);    					actualimagecursor.moveToFirst();    					img_path = actualimagecursor    							.getString(actual_image_column_index);    					if (Build.VERSION.SDK_INT < 14) {    						actualimagecursor.close();    					}    				}    		    }else if(selectedImage.getScheme().compareTo("file")==0){    		    	img_path = selectedImage.toString();    		    	img_path = selectedImage.toString().replace("file://", "");    		       //替换file://    		    }    			if (!TextUtils.isEmpty(img_path)) {//    				if(MediaFileUtil.isVideoFileType(img_path)){//    					Toast.makeText(this,"不支持视频文件，请重选!", Toast.LENGTH_SHORT).show();//    					this.finish();//    					return;//    				}else if(MediaFileUtil.isAudioFileType(img_path)){//    					Toast.makeText(this,"不支持音频文件，请重选!", Toast.LENGTH_SHORT).show();//    					this.finish();//    					return;//    				}    			}            }            Drawable headPic = new BitmapDrawable(decodeUriAsBitmap(selectedImage));            mCropImage.setDrawable(headPic,width,width); 		}else if(requestCode == RESULT_CAPTURE_HEADER){			 Bitmap headBitmap = decodeUriAsBitmap(Uri.fromFile(new File(Event.IMG_TEMP_PATH,						mOriginalFileName)));			 int degree = getExifOrientation(Event.IMG_TEMP_PATH + mOriginalFileName);			 if(degree != 0){				 Matrix m = new Matrix();				 m.postRotate(degree); 				 headBitmap = Bitmap.createBitmap(headBitmap, 0, 0, headBitmap.getWidth(),						 headBitmap.getHeight(), m, true); 			 }			 Drawable headPic = new BitmapDrawable(headBitmap);			 mCropImage.setDrawable(headPic,width,width);		}	}		private Bitmap decodeUriAsBitmap(Uri uri) {		Bitmap bitmap = null;		try {			 BitmapFactory.Options options=new BitmapFactory.Options();			   options.inJustDecodeBounds = false;			   options.inSampleSize = 2;			bitmap = BitmapFactory.decodeStream(getContentResolver()					.openInputStream(uri),null,options);		} catch (FileNotFoundException e) {			e.printStackTrace();			return null;		}		return bitmap;	}		public static int getExifOrientation(String filepath) {	    int degree = 0;  	    ExifInterface exif = null;	    try {  	        exif = new ExifInterface(filepath);	    } catch (IOException ex) {	    }  	    if (exif != null) {  	    int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, -1);	        if (orientation != -1) {	            switch(orientation) {  	                case ExifInterface.ORIENTATION_ROTATE_90:	                    degree = 90;  	                    break;  	                case ExifInterface.ORIENTATION_ROTATE_180:	                    degree = 180;  	                    break;  	                case ExifInterface.ORIENTATION_ROTATE_270:	                    degree = 270;  	                    break;  	            }  	        }  	    }  	    return degree;	}	@Override	public void onClick(View view) {		switch(view.getId()){			case R.id.cancel_select:				this.finish();				break;			case R.id.complete_select:				Bitmap headPic = mCropImage.getCropImage();				mBitmapCache.addBitmap(mOriginalFileName,headPic,false);				Intent intent = new Intent();				setResult(RESULT_OK,intent);				this.finish();				break;		}	}}